version: "3.8"
networks:
  example-microservices:
    driver: bridge
services:

  authentication-db:
    extends:
      file: ./common/common-services.yaml
      service: authentication-db
    volumes:
     - "authentication-db:/var/lib/mysql"
    networks:
      - example-microservices

  feed-db:
    extends:
      file: ./common/common-services.yaml
      service: feed-db
    volumes:
     - "feed-db:/var/lib/mysql"
    networks:
      - example-microservices

  rabbitmq:
    extends:
      file: ./common/common-services.yaml
      service: rabbitmq
    networks:
      - example-microservices

  redis-cache:
    extends:
      file: ./common/common-services.yaml
      service: redis-cache
    volumes:
     - "redis_data:/data"
    networks:
      - example-microservices

  redis-commander:
    extends:
      file: ./common/common-services.yaml
      service: redis-commander
    networks:
      - example-microservices
    depends_on:
      - redis-cache
  authentication:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    image: authentication
    container_name: authentication
    ports:
      - "4001:4001"
      - "8001:8001"
    volumes:
      - ./authentication:/authentication
    env_file:
      - ./authentication/.env
    environment:
      SERVICE_NAME: authentication
      NODE_ENV: development
      PORT: 4001
      MYSQL_HOST: authentication-db
      MYSQL_PORT: 3306
      MYSQL_USER: user123456
      MYSQL_PASS: 123456
      MYSQL_NAME: authentication
      REDIS_HOST: redis-cache
      REDIS_PORT: 6379
      REDIS_TTL: 600
      REDIS_USERNAME: 
      REDIS_PASSWORD:
      JWT_SECRET: 6C4mM1Q4sHsxydgthxw_mAGVP_qNyv1obSRuDF9ZRmrYtOnXUuFOM9YoFdbav7dTOOgPxHnoWwtAzX5pLCOooA==
      REFRESH_JWT_SECRET: B+OvdKp0vXr/wArlOlFJgUolBWFOKz9KrhNweMdOCMl5FxgvZiwB5PQ6YoK0R6OsTt2W+umHUtF2rtBuCoDNGA==
      EXPIRES_IN: 5m
      REFRESH_JWT_EXPIRES_IN: 7d
      STORAGE_KEY: key123456
      AUTHENTICATION_API: http://localhost/api/authentication
      AUTHENTICATION_CDN: http://localhost/api/authentication/static/swagger.json
      SWAGGER_URL: http://localhost/api/authentication/static/swagger.json

    depends_on:
      - authentication-db
      - redis-cache
      - rabbitmq
    networks:
      - example-microservices

  feed:
    build:
      context: ./feed
      dockerfile: Dockerfile
    image: feed
    container_name: feed
    ports:
      - "4002:4002"
      - "8002:8002"
    volumes:
      - ./feed:/feed
    environment:
      PORT: 4002
      NODE_ENV: development
      MYSQL_HOST: feed-db
      MYSQL_PORT: 3306
      MYSQL_USER: user123456
      MYSQL_PASS: 123456
      MYSQL_NAME: feed
      AUTHENTICATION_UI: "authentication@http://localhost:8001/remoteEntry.js"
      FEED_UI: "feed@http://localhost:8002/remoteEntry.js"
      RABBIT_MQ_URI: "amqp://root:123456@rabbitmq:5672"
      RABBIT_MQ_AUTHENTICATION_QUEUE: "authentication"
      RABBIT_MQ_FEED_QUEUE: "feed"
      SWAGGER_URL: http://localhost/api/feed/static/swagger.json
    env_file:
      - ./feed/.env
    depends_on:
      - authentication
      - feed-db
      - rabbitmq
    networks:
      - example-microservices

  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    image: ui
    container_name: ui
    ports:
      - "4003:4003"
    volumes:
      - ./ui:/ui
    environment:
      NODE_ENV: development
      PORT: 4003
      AUTHENTICATION_UI: "authentication@http://localhost:8001/remoteEntry.js"
      FEED_UI: "feed@http://localhost:8002/remoteEntry.js"
    depends_on:
      - authentication
      - feed
    networks:
      - example-microservices
  
  api-gateway:
    extends:
      file: ./common/common-services.yaml
      service: api-gateway
    depends_on:
      - authentication
      - feed
      - ui
    networks:
      - example-microservices

  # jenkins:
  #   extends:
  #     file: ./common/common-services.yaml
  #     service: jenkins
  #   volumes:
  #    - "jenkins-data:/var/jenkins_home"
  #    - "/var/run/docker.sock:/var/run/docker.sock"
  #   networks:
  #     - example-microservices

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - LOG_LEVEL=debug
    networks:
      - example-microservices
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
        
volumes:
  redis_data:
  jenkins-data:
  authentication-db:
    driver:
      local
  feed-db:
    driver:
      local